syntax = "proto3";

package proto;

import "google/protobuf/descriptor.proto";

option py_generic_services = true;

enum MethodStreamType
{
    No      = 0;
    In      = 1;
    Out     = 2;
    InOut   = 3;
}   

extend google.protobuf.ServiceOptions
{
    // Service identifier
    uint32 ServiceId          = 60000;
}

extend google.protobuf.MethodOptions
{
    MethodStreamType Stream    = 60002;
}

// base packet for all messages
message BasePacket
{
    enum DirectionType
    {
        Request     = 0;
        Response    = 1;
    }

    uint32          Method          = 1;    // method id
    uint32          ServiceId       = 2;    // service id
    uint32          PacketId        = 3;    // packet identifier, used to map request and response, if not set response will not be sent
    DirectionType   Direction       = 4;    // packet direction 
    bytes           Error           = 5;    // error message
    repeated string Debug           = 6;    // debug info
    uint32          ErrorId         = 7;    // error identifier
    string          CallerId        = 8;    // caller instance id
}

message Empty
{
}

message RpcInfo
{
    message Property
    {
        string Name                    = 1;
        bytes Value                    = 2;
    }

    message Instance
    {
        repeated uint32     ProvidedServices        = 1;    // services provided by rpc instance endpoint
        string              Id                      = 2;    // instance identifier
        uint32              Ping                    = 3;    // ping to instance
        repeated Property   Properties              = 4;    // various session properties
    }
    
    message Instances
    {
        repeated Instance Instances             = 1;
    }
}


// Registration service
service RegistrationService
{
    option (ServiceId) = 0;
    rpc Register(RpcInfo.Instance)     returns(RpcInfo.Instance);   // register on server
    rpc GetInfo(Empty)                 returns(RpcInfo.Instances);  // get info about server
    rpc UnRegister(Empty)              returns(Empty);              // graceful disconnect
}

// Info exchange service
service RpcEventService
{
    option (ServiceId) = 1;
    rpc UpdateInfo(RpcInfo.Instance)            returns(RpcInfo.Instance);      // exchange information between rpc servers
}